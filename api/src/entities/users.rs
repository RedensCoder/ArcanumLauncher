//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3
use axum::extract::State;
use sea_orm::entity::prelude::*;
use sea_orm::{entity::*, sea_query::*, query::*, Update,ActiveModelTrait, Set};
use crate::entities::users::SubQueryStatement;
use crate::entities::users::query::UpdateStatement;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub username: String,
    #[sea_orm(column_type = "Text")]
    pub password: String,
    #[sea_orm(column_type = "Text")]
    pub email: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub about: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub avatar: String,
    pub lvl: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::user_library::Entity")]
    UserLibrary,
}

impl Related<super::user_library::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserLibrary.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

// pub async fn delete_by_name(State(db): State<DatabaseConnection>){
//     let mut user = Entity::find_by_id("8943ac345b34277db00533dc20f1fb1c")
//     .one(&db)
//     .await.unwrap();
    
//     user.unwrap().delete(&db).await.unwrap();
//     // println!("{:#?}", user);
//     // println!("мы нашли его спустя полгода");
//     println!("мы нашли его спустя полгода и удалили");
// // Обновляем значение электронной почты в поле ActiveModel структуре
// }
// pub async fn update_avatar(State(db): State<DatabaseConnection>){
//     let user = Entity::find_by_id("8943ac345b34277db00533dc20f1fb1c")
//     .one(&db.clone())
//     .await.unwrap();

//     let new_user = ActiveModel {
//     username: Set(format!("{}",&user.clone().unwrap().username.clone())),
//     password: Set(format!("{}",&user.clone().unwrap().password.clone())),
//     email: Set(format!("{}",&user.clone().unwrap().email.clone())),
//     about: Set(Some("".to_string())),
//     avatar: Set("http://127.0.0.1:8080/api/v1/img/add_avatar.png".to_string()),
//     lvl: Set(*&user.clone().unwrap().lvl.clone()),
//     ..Default::default()
// };

//     // user.unwrap().avatar = Set("newemail@example.com".to_string()).unwrap();
//     new_user.save(&db).await.unwrap();
//     println!("мы нашли его спустя полгода и удалили");
// }
// pub async fn sellect_by_name(){

// }
//sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss
// .clone().email = Set("newemail@example.com".to_string()).unwrap();

// println!("{:#?}");

// Создаем объект UpdateStatement с новыми значениями и критериями фильтрации
// let ss = ActiveModel::update(&user_to_update)
//     .filter(Column::Username.eq("34ec78fcc91ffb1e54cd85e4a0924332"))
//     .build();

// Выполняем запрос
// update_statement.execute(&db).await.unwrap();

// После выполнения метода `execute()` запись пользователя обновлена в базе данных
// println!("Updated user: {:?}", updated_user);

